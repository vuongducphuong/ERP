{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
    // }

    "Thiết lập mặc định thời gian": {
		"prefix": "default",
		"body": [
			"default=fields.Datetime.now"
		],
		"description": "Thiết lập mặc định thời gian"
    },




    
    "Thay đổi thời gian khi chọn kỳ báo cáo": {
    "prefix": "_cap_nhat_ngay(self)",
    "Lọc detail nhân viên trong bảng res.partner": {
		"prefix": "DMNV",
		"body": [
			"('employee','=','True')"
		],
		"description": "Domain detail nhân viên trong bảng res.partner"
    },
    "Lọc detail khách hàng trong bảng res.partner": {
		"prefix": "DMKH",
		"body": [
			"('customer','=','True')"
		],
		"description": "Domain detail khách hàng trong bảng res.partner"
    },
    "Lọc detail nhà cung cấp trong bảng res.partner": {
		"prefix": "DMNCC",
		"body": [
			"('supplier','=','True')"
		],
		"description": "Domain detail nhà cung cấp trong bảng res.partner"
    },
    "Mặc định một trường bằng True": {
		"prefix": "required",
		"body": [
			"required=True"
		],
		"description": "Mặc định một trường không để trống"
    },
    "Thêm một param khi có một trường mới": {
		"prefix": "params",
		"body": [
			"${1:TEN_TRUONG}= params['${1:TEN_TRUONG}'] if '${1: TEN_TRUONG}' in params.keys() else 'False'"
		],
		"description": "Thêm một param khi có một trường mới"
    },
    "Thêm một param": {
		"prefix": "params_get",
		"body": [
			"${1: TEN_TRUONG} = params.get('${1: TEN_TRUONG}', 'False')"
		],
		"description": "Thêm một param khi có một trường mới"
	},
    "Thay đổi thời gian theo kỳ báo cáo": {
		"prefix": "_cap_nhat_ngay",
		"body": [
			"@api.onchange('KY_BAO_CAO')",
            "def _cap_nhat_ngay(self):",
            "\tself.onchange_time(self.KY_BAO_CAO, 'TU_NGAY', 'DEN_NGAY')"
		],
		"description": "Thay đổi thời gian theo kỳ báo cáo"
	},
    "Bỏ hai số không sau dấu phẩy": {
		"prefix": "digits",
		"body": [
			"digits= decimal_precision.get_precision('Product Price')"
		],
		"description": "Bỏ đi hai số không sau dấu phẩy"
	},
	"Lấy bảng": {
		"prefix": "env",
		"body": [
			"self.env['${1:Ten.bang}']"
		],
		"description": "Thao tác với bảng"
	},
	"Tìm kiếm": {
		"prefix": "search",
		"body": [
			"self.env['${1:Ten.bang}'].search([('${2:Trường}', '${3:=}', '${4: Giá trị}')])"
		],
		"description": "Tìm kiếm bản ghi trong database"
	},
	"Tìm kiếm theo id": {
		"prefix": "browse",
		"body": [
			"self.env['${1:Ten.bang}'].browse('${2:id}')"
		],
		"description": "Tìm kiếm bản ghi trong database"
	},
	"Thêm": {
		"prefix": "create",
		"body": [
			"self.env['${1:Ten.bang}'].create({",
				"\t'${2: Trường}': ${3: Giá trị},",
			"})"
		],
		"description": "Thêm bản ghi"
	},
	"Sửa": {
		"prefix": "write",
		"body": [
			"self.env['${1:Ten.bang}'].create({",
				"\t'${2: Trường}': ${3: Giá trị},",
			"})"
		],
		"description": "Sửa bản ghi"
	},
	"Lấy mặc định": {
		"prefix": "default_get",
		"body": [
			"@api.model",
			"def default_get(self, fields):",
				"\trec = super(${1:TEN_CLASS}, self).default_get(fields)",
				"\trec['${2:Trường}'] = ${3:Giá trị}",
				"\treturn rec"
		],
		"description": "Thiết lập các giá trị mặc định"
	},
	"Thay đổi": {
		"prefix": "onchange",
		"body": [
			"@api.onchange('${1:Trường}')",
			"def update_${1:Trường}(self):",
				"\tself.${2:Trường} = ${3:Giá trị}"
		],
		"description": "Cập nhật lại giá trị một trường khi trường khác thay đổi"
	},
	"Tạo trường": {
		"prefix": "fields",
		"body": [
			"${1:TEN_TRUONG} = fields.${2|Integer,Char,Selection,Boolean,Many2one,One2many,Many2many,Float,Monetary|}('${3}', string='${4:Tên nhãn}', help='${4:Mô tả}')"
		],
		"description": "Tạo trường mới cho model"
	},
	"Model": {
        "body": [
            "",
            "class ${1:ModelName}(models.TransientModel):",
            "    \"\"\" ${2:The summary line for a class docstring should fit on one line.}",
            "",
            "    \"\"\"",
            "",
            "    _name = '${3:${1/((^[A-Z])|([A-Z]))/(?2:\\l$2)(?3:\\.\\l$3)/g}}'",
            "    _description = u'${4:${1/((^[A-Z])|([A-Z]))/(?2:\\u$2)(?3:\\ \\l$3)/g}}'",
            "    _inherit = '${4:ModelName}'",
            "",
            "    ${0}",
            ""
        ],
        "description": "Odoo transient model class",
        "prefix": "Model"
    },
    "Model1": {
        "body": [
            "",
            "class ${1:ModelName}(models.Model):",
            "    \"\"\" ${2:The summary line for a class docstring should fit on one line.}",
            "",
            "    Fields:",
            "      name (Char): Human readable name which will identify each record.",
            "",
            "    \"\"\"",
            "",
            "    _name = '${3:${1/((^[A-Z])|([A-Z]))/(?2:\\l$2)(?3:\\.\\l$3)/g}}'",
            "    _description = u'${4:${1/((^[A-Z])|([A-Z]))/(?2:\\u$2)(?3:\\ \\l$3)/g}}'",
            "",
            "    _rec_name = 'name'",
            "    _order = 'name ASC'",
            "",
            "    name = fields.Char(",
            "        string=u'Name',",
            "        required=True,",
            "        readonly=False,",
            "        index=True,",
            "        default=None,",
            "        help=False,",
            "        size=50,",
            "        translate=True",
            "    )${0}",
            ""
        ],
        "description": "Odoo generic model class",
        "prefix": "Model"
    },
    "TransactionCase": {
        "body": [
            "",
            "from openerp.tests.common import TransactionCase",
            "",
            "",
            "class ${1:ModelName}(TransactionCase):",
            "    \"\"\" ${2:This class contains the unit tests for '${1/((^[A-Z])|([A-Z]))/(?2:\\l$2)(?3:\\.\\l$3)/g}'.}",
            "",
            "        Tests:",
            "          - ${3}: Checks if the ${3} works properly",
            "    \"\"\"",
            "",
            "    def setUp(self):",
            "        super(${1}, self).setUp()",
            "",
            "    def test_${3:item_name}(self):",
            "        \"\"\" Checks if the ${3} works properly \"\"\"",
            "",
            "        ${0:pass}",
            ""
        ],
        "description": "",
        "prefix": "TransactionCase"
    },
    "__init__": {
        "body": [
            "",
            "# -*- coding: utf-8 -*-",
            "###############################################################################",
            "#    License, author and contributors information in:                         #",
            "#    __openerp__.py file at the root folder of this module.                   #",
            "###############################################################################",
            "",
            "from . import ${1:models}${0}",
            ""
        ],
        "description": "",
        "prefix": "__init__"
    },
    "__manifest__": {
        "body": [
            "",
            "# -*- coding: utf-8 -*-",
            "###############################################################################",
            "#",
            "#    Odoo, Open Source Management Solution",
            "#",
            "#    Copyright (c) All rights reserved:",
            "#        (c) 2015  $TM_FULLNAME",
            "#",
            "#    This program is free software: you can redistribute it and/or modify",
            "#    it under the terms of the GNU Affero General Public License as",
            "#    published by the Free Software Foundation, either version 3 of the",
            "#    License, or (at your option) any later version.",
            "#",
            "#    This program is distributed in the hope that it will be useful,",
            "#    but WITHOUT ANY WARRANTY; without even the implied warranty of",
            "#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the",
            "#    GNU Affero General Public License for more details.",
            "#",
            "#    You should have received a copy of the GNU Affero General Public License",
            "#    along with this program.  If not, see http://www.gnu.org/licenses",
            "#",
            "###############################################################################",
            "{",
            "    'name': '${1:Human readable name}',",
            "    'summary': '${2:${1}} Module Project',",
            "    'version': '1.0',",
            "",
            "    'description': \"\"\"",
            "${3:${1}} Module Project.",
            "==============================================",
            "",
            "${4}",
            "    \"\"\",",
            "",
            "    'author': '${5:$TM_FULLNAME}',",
            "    'maintainer': '${5}',",
            "    'contributors': ['${6:${5} <${5}@gmail.com>}'],",
            "",
            "    'website': 'http://www.gitlab.com/${7:${5}}',",
            "",
            "    'license': 'AGPL-3',",
            "    'category': 'Uncategorized',",
            "",
            "    'depends': [",
            "        'base'",
            "    ],",
            "    'external_dependencies': {",
            "        'python': [",
            "        ],",
            "    },",
            "    'data': [",
            "    ],",
            "    'demo': [",
            "    ],",
            "    'js': [",
            "    ],",
            "    'css': [",
            "    ],",
            "    'qweb': [",
            "    ],",
            "    'images': [",
            "    ],",
            "    'test': [",
            "    ],",
            "",
            "    'installable': True",
            "}${0}",
            ""
        ],
        "description": "Odoo manifest file common structure",
        "prefix": "__manifest__"
    },
    "__openerp__": {
        "body": [
            "",
            "# -*- coding: utf-8 -*-",
            "###############################################################################",
            "#",
            "#    Odoo, Open Source Management Solution",
            "#",
            "#    Copyright (c) All rights reserved:",
            "#        (c) 2015  $TM_FULLNAME",
            "#",
            "#    This program is free software: you can redistribute it and/or modify",
            "#    it under the terms of the GNU Affero General Public License as",
            "#    published by the Free Software Foundation, either version 3 of the",
            "#    License, or (at your option) any later version.",
            "#",
            "#    This program is distributed in the hope that it will be useful,",
            "#    but WITHOUT ANY WARRANTY; without even the implied warranty of",
            "#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the",
            "#    GNU Affero General Public License for more details.",
            "#",
            "#    You should have received a copy of the GNU Affero General Public License",
            "#    along with this program.  If not, see http://www.gnu.org/licenses",
            "#",
            "###############################################################################",
            "{",
            "    'name': '${1:Human readable name}',",
            "    'summary': '${2:${1}} Module Project',",
            "    'version': '1.0',",
            "",
            "    'description': \"\"\"",
            "${3:${1}} Module Project.",
            "==============================================",
            "",
            "${4}",
            "    \"\"\",",
            "",
            "    'author': '${5:$TM_FULLNAME}',",
            "    'maintainer': '${5}',",
            "    'contributors': ['${6:${5} <${5}@gmail.com>}'],",
            "",
            "    'website': 'http://www.gitlab.com/${7:${5}}',",
            "",
            "    'license': 'AGPL-3',",
            "    'category': 'Uncategorized',",
            "",
            "    'depends': [",
            "        'base'",
            "    ],",
            "    'external_dependencies': {",
            "        'python': [",
            "        ],",
            "    },",
            "    'data': [",
            "    ],",
            "    'demo': [",
            "    ],",
            "    'js': [",
            "    ],",
            "    'css': [",
            "    ],",
            "    'qweb': [",
            "    ],",
            "    'images': [",
            "    ],",
            "    'test': [",
            "    ],",
            "",
            "    'installable': True",
            "}${0}",
            ""
        ],
        "description": "Odoo manifest file common structure",
        "prefix": "__openerp__"
    },
    "_auto": {
        "body": [
            "",
            "_auto = ${1:False}${0}",
            ""
        ],
        "description": "Adds the _auto attribute",
        "prefix": "_auto"
    },
    "_inherit": {
        "body": [
            "",
            "_inherit = ['${1:ir.model}'${2}]${0}",
            ""
        ],
        "description": "Model attribute _inherit with a module list",
        "prefix": "_inherit"
    },
    "_inherits": {
        "body": [
            "",
            "_inherits = {'${1:model_name}': '${2:related_id}'${3}}${0}",
            ""
        ],
        "description": "Model attribute _inherits and single parent field",
        "prefix": "_inherits"
    },
    "_parent_store": {
        "body": [
            "",
            "_parent_store = ${1:True}",
            "${0}",
            "",
            "parent_left = fields.Integer('Left Parent', index=1)",
            "parent_right = fields.Integer('Right Parent', index=1)",
            "",
            ""
        ],
        "description": "Adds the _parent_store attribute and parent_left and parent_right",
        "prefix": "_parent_store"
    },
    "_sql_constraints": {
        "body": [
            "",
            "_sql_constraints = [",
            "    (",
            "        '${1:name}',",
            "        '${2:constraint}',",
            "        _(u'${3:message}')",
            "    )${4}",
            "]${0}",
            ""
        ],
        "description": "Model SQL contraints",
        "prefix": "_sql_constraints"
    },
    "addTypeEqualityFunc": {
        "body": [
            "",
            "addTypeEqualityFunc(${1:typeobj}, ${2:function})",
            ""
        ],
        "description": "addTypeEqualityFunc",
        "prefix": "addTypeEqualityFunc"
    },
    "api_constraints": {
        "body": [
            "",
            "@api.one",
            "@api.constrains('${1}')",
            "def _check_${1}(self):",
            "    ${0}",
            ""
        ],
        "description": "Model Python contraints",
        "prefix": "api_constraints"
    },
    "assertAlmostEqual": {
        "body": [
            "",
            "assertAlmostEqual(${1:first}, ${2:second}${4:, ${3:places=7}}${6:, ${5:msg=None}}${8:, ${7:delta=None}})",
            ""
        ],
        "description": "assertAlmostEqual",
        "prefix": "assertAlmostEqual"
    },
    "assertDictContainsSubset": {
        "body": [
            "",
            "assertDictContainsSubset(${1:expected}, ${2:actual}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertDictContainsSubset",
        "prefix": "assertDictContainsSubset"
    },
    "assertDictEqual": {
        "body": [
            "",
            "assertDictEqual(${1:expected}, ${2:actual}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertDictEqual",
        "prefix": "assertDictEqual"
    },
    "assertEqual": {
        "body": [
            "",
            "assertEqual(${1:first}, ${2:second}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertEqual",
        "prefix": "assertEqual"
    },
    "assertFalse": {
        "body": [
            "",
            "assertFalse(${1:expr}${3:, ${2:msg=None}})",
            ""
        ],
        "description": "assertFalse",
        "prefix": "assertFalse"
    },
    "assertGreater": {
        "body": [
            "",
            "assertGreater(${1:first}, ${2:second}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertGreater",
        "prefix": "assertGreater"
    },
    "assertGreaterEqual": {
        "body": [
            "",
            "assertGreaterEqual(${1:first}, ${2:second}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertGreaterEqual",
        "prefix": "assertGreaterEqual"
    },
    "assertIn": {
        "body": [
            "",
            "assertIn(${1:first}, ${2:second}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertIn",
        "prefix": "assertIn"
    },
    "assertIs": {
        "body": [
            "",
            "assertIs(${1:first}, ${2:second}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertIs",
        "prefix": "assertIs"
    },
    "assertIsInstance": {
        "body": [
            "",
            "assertIsInstance(${1:obj}, ${2:cls}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertIsInstance",
        "prefix": "assertIsInstance"
    },
    "assertIsNone": {
        "body": [
            "",
            "assertIsNone(${1:expr}${3:, ${2:msg=None}})",
            ""
        ],
        "description": "assertIsNone",
        "prefix": "assertIsNone"
    },
    "assertIsNot": {
        "body": [
            "",
            "assertIsNot(${1:first}, ${2:second}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertIsNot",
        "prefix": "assertIsNot"
    },
    "assertIsNotNone": {
        "body": [
            "",
            "assertIsNotNone(${1:expr}${3:, ${2:msg=None}})",
            ""
        ],
        "description": "assertIsNotNone",
        "prefix": "assertIsNotNone"
    },
    "assertItemsEqual": {
        "body": [
            "",
            "assertItemsEqual(${1:actual}, ${2:expected}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertItemsEqual",
        "prefix": "assertItemsEqual"
    },
    "assertLess": {
        "body": [
            "",
            "assertLess(${1:first}, ${2:second}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertLess",
        "prefix": "assertLess"
    },
    "assertLessEqual": {
        "body": [
            "",
            "assertLessEqual(${1:first}, ${2:second}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertLessEqual",
        "prefix": "assertLessEqual"
    },
    "assertListEqual": {
        "body": [
            "",
            "assertListEqual(${1:list1}, ${2:list2}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertListEqual",
        "prefix": "assertListEqual"
    },
    "assertMultiLineEqual": {
        "body": [
            "",
            "assertMultiLineEqual(${1:first}, ${2:second}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertMultiLineEqual",
        "prefix": "assertMultiLineEqual"
    },
    "assertNotAlmostEqual": {
        "body": [
            "",
            "assertNotAlmostEqual(${1:first}, ${2:second}${4:, ${3:places=7}}${6:, ${5:msg=None}}${9:, ${8:delta=None}})",
            ""
        ],
        "description": "assertNotAlmostEqual",
        "prefix": "assertNotAlmostEqual"
    },
    "assertNotEqual": {
        "body": [
            "",
            "assertNotEqual(${1:first}, ${2:second}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertNotEqual",
        "prefix": "assertNotEqual"
    },
    "assertNotIn": {
        "body": [
            "",
            "assertNotIn(${1:first}, ${2:second}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertNotIn",
        "prefix": "assertNotIn"
    },
    "assertNotIsInstance": {
        "body": [
            "",
            "assertNotIsInstance(${1:obj}, ${2:cls}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertNotIsInstance",
        "prefix": "assertNotIsInstance"
    },
    "assertNotRegexpMatches": {
        "body": [
            "",
            "assertNotRegexpMatches(${1:text}, ${2:regexp}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertNotRegexpMatches",
        "prefix": "assertNotRegexpMatches"
    },
    "assertRaises": {
        "body": [
            "",
            "assertRaises(${1:exception}, ${2:callable}, ${3:*args}, ${4:**kwds})",
            ""
        ],
        "description": "assertRaises (extended)",
        "prefix": "assertRaises"
    },
    "assertRaises1": {
        "body": [
            "",
            "assertRaises(${1:exception})",
            ""
        ],
        "description": "assertRaises",
        "prefix": "assertRaises"
    },
    "assertRaisesRegexp": {
        "body": [
            "",
            "assertRaisesRegexp(${1:exception}, ${2:regexp}, ${3:callable}, ${4:*args}, ${5:**kwds})",
            ""
        ],
        "description": "assertRaisesRegexp (extended)",
        "prefix": "assertRaisesRegexp"
    },
    "assertRaisesRegexp1": {
        "body": [
            "",
            "assertRaisesRegexp(${1:exception}, ${2:regexp})",
            ""
        ],
        "description": "assertRaisesRegexp",
        "prefix": "assertRaisesRegexp"
    },
    "assertRegexpMatches": {
        "body": [
            "",
            "assertRegexpMatches(${1:text}, ${2:regexp}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertRegexpMatches",
        "prefix": "assertRegexpMatches"
    },
    "assertSequenceEqual": {
        "body": [
            "",
            "assertSequenceEqual(${1:seq1}, ${2:seq2}${4:, ${3:msg=None}}${6:, ${5:seq_type=None}})",
            ""
        ],
        "description": "assertSequenceEqual",
        "prefix": "assertSequenceEqual"
    },
    "assertSetEqual": {
        "body": [
            "",
            "assertSetEqual(${1:set1}, ${2:set2}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertSetEqual",
        "prefix": "assertSetEqual"
    },
    "assertTrue": {
        "body": [
            "",
            "assertTrue(${1:expr}${3:, ${2:msg=None}})",
            ""
        ],
        "description": "assertTrue",
        "prefix": "assertTrue"
    },
    "assertTupleEqual": {
        "body": [
            "",
            "assertTupleEqual(${1:tuple1}, ${2:tuple2}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertTupleEqual",
        "prefix": "assertTupleEqual"
    },
    "compute": {
        "body": [
            "",
            "compute='_compute_${1:field}'${0}",
            ""
        ],
        "description": "Field attribute: compute, lambda function",
        "prefix": "compute"
    },
    "controller": {
        "body": [
            "",
            "class ${1:ControllerName}(Controller):",
            "    \"\"\" ${2:The summary line for a class docstring should fit on one line.}",
            "",
            "        Routes:",
            "          /${3:some_url}: ${4:url description}",
            "    \"\"\"",
            "",
            "    @route('/${3}', type='${5:http}', auth='${6:none}')",
            "    def ${3/((^[A-Z])|([^a-zA-Z]))/(?2:\\l$2)(?3:\\_)/g}(self${7:, **kw}):",
            "",
            "        pass${0}",
            ""
        ],
        "description": "Controller",
        "prefix": "controller"
    },
    "def _browse": {
        "body": [
            "",
            "@classmethod",
            "def _browse(cls, env, ids):",
            "    \"\"\" Returns a recordset for the ids provided as parameter in the current",
            "        environment.",
            "",
            "        Can take no ids, a single id or a sequence of ids.",
            "",
            "        :param cls: model class",
            "        :param env: environment",
            "        :param ids: none, a single id or a sequence of ids",
            "",
            "        :return: a recordset",
            "    \"\"\"",
            "",
            "    result = ${1:class_name}._browse(env, ids)",
            "    ${0}",
            "    return result",
            ""
        ],
        "description": "_browse method signature",
        "prefix": "def _browse"
    },
    "def _compute": {
        "body": [
            "",
            "@api.multi",
            "@api.depends('${1:depends}')",
            "def _compute_${2:field}(self):",
            "    for record in self:",
            "        ${4:record.${2:field} = ${3:something}}",
            "${0}",
            ""
        ],
        "description": "_compute method signature",
        "prefix": "def _compute"
    },
    "def _log": {
        "body": [
            "",
            "def _log(self, level, msg_format, *args, **kwargs):",
            "    \"\"\" Outputs an formated string in log",
            "",
            "        :param level (int): 1=> debug, 2=> info, 3=> warning, 4=> error",
            "        :param message (basestring): name of the message",
            "    \"\"\"",
            "",
            "    methods = ['debug', 'info', 'warning', 'error']",
            "    log = getattr(_logger, methods[level])",
            "",
            "    msg = msg_format.format(*args, **kwargs)",
            "    log(msg)",
            ""
        ],
        "description": "Common _log method",
        "prefix": "def _log"
    },
    "def _search": {
        "body": [
            "",
            "@api.model",
            "def _search_${1: field}(self, operator, value):",
            "    return [('${2:related}', operator, value)]${0}",
            ""
        ],
        "description": "_search method signature",
        "prefix": "def _search"
    },
    "def copy": {
        "body": [
            "",
            "@api.one",
            "def copy(self, default=None):",
            "    \"\"\"",
            "        Create a new record in ${1:ModelName} model from existing one",
            "        @param default: dict which contains the values to be override during",
            "        copy of object",
            "",
            "        @return: returns a id of newly created record",
            "    \"\"\"",
            "",
            "    result = super(${1:ModelName}, self).copy(default)${0}",
            "",
            "    return result",
            ""
        ],
        "description": "copy method signature",
        "prefix": "def copy"
    },
    "def create": {
        "body": [
            "",
            "@api.model",
            "def create(self, values):",
            "    \"\"\"",
            "        Create a new record for a model ${1:ModelName}",
            "        @param values: provides a data for new record",
            "",
            "        @return: returns a id of new record",
            "    \"\"\"",
            "",
            "    result = super(${1:Model_Name}, self).create(values)${0}",
            "",
            "    return result",
            ""
        ],
        "description": "create method signature",
        "prefix": "def create"
    },
    "def get_empty_list_help": {
        "body": [
            "",
            "@api.model",
            "def get_empty_list_help(self, help):",
            "    \"\"\" Generic method giving the help message displayed when having",
            "        no result to display in a list or kanban view.",
            "    \"\"\"",
            "",
            "    ${0:return help}",
            ""
        ],
        "description": "get_empty_list_help method signature",
        "prefix": "def get_empty_list_help"
    },
    "def get_formview_id": {
        "body": [
            "",
            "@api.one",
            "@api.returns('ir.ui.view')",
            "def get_formview_id(self):",
            "    \"\"\" Return an view id to open the document with.",
            "",
            "        :param int id: id of the document to open",
            "    \"\"\"",
            "",
            "    ${0:return False}",
            ""
        ],
        "description": "get_formview_id method signature",
        "prefix": "def get_formview_id"
    },
    "def init": {
        "body": [
            "",
            "def init(self, cr):",
            "    \"\"\" Build database view which will be used as module origin",
            "",
            "        :param cr: database cursor",
            "    \"\"\"",
            "",
            "    self._sql_query = \"\"\"",
            "        SELECT",
            "            ROW_NUMBER() OVER() AS \"id\"",
            "    \"\"\"",
            "",
            "    drop_view_if_exists(cr, ${1:self._table})",
            "    cr.execute(",
            "        'create or replace view {} as ({})'.format(",
            "            ${1},",
            "            self._sql_query",
            "        )",
            "    )${0}",
            ""
        ],
        "description": "init method signature",
        "prefix": "def init"
    },
    "def onchange": {
        "body": [
            "",
            "@api.one",
            "@api.onchange('${1:field}')",
            "def _onchange_${1}(self):",
            "    ${3:self.${2:field} = self.${1}}",
            "${0}",
            ""
        ],
        "description": "_onchange method signature, code",
        "prefix": "def onchange"
    },
    "def onchange1": {
        "body": [
            "",
            "@api.onchange('${1:field_name}')",
            "def _onchange_${1}(self):",
            "    return {",
            "        'domain': {",
            "            '${2:field_name}': ${6:[('${3:field_name}', '${4:=}', ${5:self.${1}})]}",
            "        }",
            "    }${0}",
            ""
        ],
        "description": "_onchange method signature, domain",
        "prefix": "def onchange"
    },
    "def onchange2": {
        "body": [
            "",
            "@api.onchange('${1:field}')",
            "def _onchange_${1}(self):",
            "    return {",
            "        'warning': {",
            "            'title': '${2:Text of the title}',",
            "            'message': '${3:Text of the message}'",
            "        }",
            "    }${0}",
            ""
        ],
        "description": "_onchange method signature, warning",
        "prefix": "def onchange"
    },
    "def unlink": {
        "body": [
            "",
            "@api.multi",
            "def unlink(self):",
            "    \"\"\"",
            "        Delete all record(s) from recordset",
            "        return True on success, False otherwise",
            "",
            "        @return: True on success, False otherwise",
            "",
            "        #TODO: process before delete resource",
            "    \"\"\"",
            "",
            "    result = super(${1:ModelName}, self).unlink()${0}",
            "",
            "    return result",
            ""
        ],
        "description": "unlink method signature",
        "prefix": "def unlink"
    },
    "def view_header_get": {
        "body": [
            "",
            "@api.model",
            "def view_header_get(self, view_id=None, view_type='form'):",
            "    \"\"\" Returns the window title which depends on the context \"\"\"",
            "",
            "    ${0:return False}",
            ""
        ],
        "description": "view_header_get method signature",
        "prefix": "def view_header_get"
    },
    "def view_init": {
        "body": [
            "",
            "@api.model",
            "def view_init(self, fields_list):",
            "    \"\"\" Does specific things when a view on the object is opened \"\"\"",
            "",
            "    ${0:pass}",
            ""
        ],
        "description": "view_init method signature",
        "prefix": "def view_init"
    },
    "def write": {
        "body": [
            "",
            "@api.multi",
            "def write(self, values):",
            "    \"\"\"",
            "        Update all record(s) in recordset, with new value comes as {values}",
            "        return True on success, False otherwise",
            "",
            "        @param values: dict of new values to be set",
            "",
            "        @return: True on success, False otherwise",
            "    \"\"\"",
            "",
            "    result = super(${1:Model_Name}, self).write(values)${0}",
            "",
            "    return result",
            ""
        ],
        "description": "write method signature",
        "prefix": "def write"
    },
    "default": {
        "body": [
            "",
            "default=lambda self: self._default_${1:field}()${0}",
            ""
        ],
        "description": "Field attribute: search, lambda function",
        "prefix": "default"
    },
    "default company": {
        "body": [
            "",
            "default=lambda self: self.env['res.company']._company_default_get(${1:'res.users'})${0}",
            ""
        ],
        "description": "Field attribute: default company",
        "prefix": "default company"
    },
    "default user": {
        "body": [
            "",
            "default=lambda self: self.env.user${0}",
            ""
        ],
        "description": "Field attribute: default user",
        "prefix": "default user"
    },
    "default_model": {
        "body": [
            "",
            "default_model='${1:model.name}'${0}",
            ""
        ],
        "description": "Field attribute: default_model ",
        "prefix": "default_model"
    },
    "dom": {
        "body": [
            "",
            "${1:[}${2:'${3:&}',}('${4:field_name (in self)}','${5:=}', ${6:\"Please use: 'value' or self.dot.notation\"}),${1/^\\[/\\]/g}",
            ""
        ],
        "description": "Common domain definition",
        "prefix": "dom"
    },
    "fail": {
        "body": [
            "",
            "fail(${1:msg=None})",
            ""
        ],
        "description": "fail",
        "prefix": "fail"
    },
    "fields.Binary": {
        "body": [
            "",
            "${1:field_name} = fields.Binary(",
            "    string=u'${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',",
            "    required=${3:False},",
            "    readonly=${4:False},",
            "    index=${5:False},",
            "    default=${6:0},",
            "    help=${7:False}",
            ")${0}",
            ""
        ],
        "description": "Common definition for field type Binary",
        "prefix": "fields.Binary"
    },
    "fields.Boolean": {
        "body": [
            "",
            "${1:field_name} = fields.Boolean(",
            "    string=u'${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',",
            "    required=${3:False},",
            "    readonly=${4:False},",
            "    index=${5:False},",
            "    default=${6:False},",
            "    help=${7:False}",
            ")${0}",
            ""
        ],
        "description": "Common definition for field type Boolean",
        "prefix": "fields.Boolean"
    },
    "fields.Char": {
        "body": [
            "",
            "${1:field_name} = fields.Char(",
            "    string=u'${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',",
            "    required=${3:False},",
            "    readonly=${4:False},",
            "    index=${5:False},",
            "    default=${6:None},",
            "    help=${7:False},",
            "    size=${8:50},",
            "    translate=${9:True}",
            ")${0}",
            ""
        ],
        "description": "Common definition for field type Char",
        "prefix": "fields.Char"
    },
    "fields.Date": {
        "body": [
            "",
            "${1:field_name} = fields.Date(",
            "    string=u'${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',",
            "    required=${3:False},",
            "    readonly=${4:False},",
            "    index=${5:False},",
            "    default=${6:fields.Date.context_today},",
            "    help=${7:False}",
            ")${0}",
            ""
        ],
        "description": "Common definition for field type Date",
        "prefix": "fields.Date"
    },
    "fields.Datetime": {
        "body": [
            "",
            "${1:field_name} = fields.Datetime(",
            "    string=u'${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',",
            "    required=${3:False},",
            "    readonly=${4:False},",
            "    index=${5:False},",
            "    default=${6:fields.Datetime.now},",
            "    help=${7:False}",
            ")${0}",
            ""
        ],
        "description": "Common definition for field type Datetime",
        "prefix": "fields.Datetime"
    },
    "fields.Float": {
        "body": [
            "",
            "${1:field_name} = fields.Float(",
            "    string=u'${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',",
            "    required=${3:False},",
            "    readonly=${4:False},",
            "    index=${5:False},",
            "    default=${6:0.0},",
            "    digits=(${7:16}, ${8:2}),",
            "    help=${9:False}",
            ")${0}",
            ""
        ],
        "description": "Common definition for field type Float",
        "prefix": "fields.Float"
    },
    "fields.Html": {
        "body": [
            "",
            "${1:field_name} = fields.Html(",
            "    string=u'${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',",
            "    required=${3:False},",
            "    readonly=${4:False},",
            "    index=${5:False},",
            "    default=${6:None},",
            "    help=${7:False}",
            ")${0}",
            ""
        ],
        "description": "Common definition for field type HTML",
        "prefix": "fields.Html"
    },
    "fields.Integer": {
        "body": [
            "",
            "${1:field_name} = fields.Integer(",
            "    string=u'${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',",
            "    required=${3:False},",
            "    readonly=${4:False},",
            "    index=${5:False},",
            "    default=${6:0},",
            "    help=${7:False}",
            ")${0}",
            ""
        ],
        "description": "Common definition for field type Integer",
        "prefix": "fields.Integer"
    },
    "fields.Many2many": {
        "body": [
            "",
            "${1:field_name} = fields.Many2many(",
            "    string=u'${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',",
            "    required=${3:False},",
            "    readonly=${4:False},",
            "    index=${5:False},",
            "    default=${6:None},",
            "    help=${7:False},",
            "    comodel_name='${8:model.name}',",
            "    relation='${9:${8/\\./_/g}_this_model_rel}',",
            "    column1='${10:${8/\\./_/g}_id}',",
            "    column2='${11:this_model_id}',",
            "    domain=[${12}],",
            "    context=\\{${13}\\},",
            "    limit=${14:None}",
            ")${0}",
            ""
        ],
        "description": "Common definition for field type Many2many",
        "prefix": "fields.Many2many"
    },
    "fields.Many2one": {
        "body": [
            "",
            "${1:field_name} = fields.Many2one(",
            "    string=u'${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',",
            "    required=${3:False},",
            "    readonly=${4:False},",
            "    index=${5:False},",
            "    default=${6:None},",
            "    help=${7:False},",
            "    comodel_name='${8:model.name}',",
            "    domain=[${9}],",
            "    context=\\{${10}\\},",
            "    ondelete='${11:set null}',",
            "    auto_join=${12:False}",
            ")${0}",
            ""
        ],
        "description": "Common definition for field type Many2one",
        "prefix": "fields.Many2one"
    },
    "fields.One2many": {
        "body": [
            "",
            "${1:field_name} = fields.One2many(",
            "    string=u'${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',",
            "    required=${3:False},",
            "    readonly=${4:False},",
            "    index=${5:False},",
            "    default=${6:None},",
            "    help=${7:False},",
            "    comodel_name='${8:model.name}',",
            "    inverse_name='${9:inverse_field}',",
            "    domain=[${10}],",
            "    context=\\{${11}\\},",
            "    auto_join=${12:False},",
            "    limit=${13:None}",
            ")${0}",
            ""
        ],
        "description": "Common definition for field type One2Many",
        "prefix": "fields.One2many"
    },
    "fields.Reference": {
        "body": [
            "",
            "${1:field_name} = fields.Reference(",
            "    string=u'${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',",
            "    required=${3:False},",
            "    readonly=${4:False},",
            "    index=${5:False},",
            "    default=${6:0},",
            "    help=${7:False},",
            "    selection=[('${8:model.name}', '${9:String}'),('${10:model.name}', '${11:String}')]",
            ")${0}",
            ""
        ],
        "description": "Common definition for field type Reference",
        "prefix": "fields.Reference"
    },
    "fields.Selection": {
        "body": [
            "",
            "${1:field_name} = fields.Selection(",
            "    string=u'${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',",
            "    required=${3:False},",
            "    readonly=${4:False},",
            "    index=${5:False},",
            "    default=${6:False},",
            "    help=${7:False},",
            "    selection=[('${8:valor1}', '${9:${8/(.)(.+)/\\u$1$2/g}}'), ('${10:valor2}', '${11:${10/(.)(.+)/\\u$1$2/g}}')]",
            ")${0}",
            ""
        ],
        "description": "Common definition for field type Seleccion",
        "prefix": "fields.Selection"
    },
    "fields.Text": {
        "body": [
            "",
            "${1:field_name} = fields.Text(",
            "    string=u'${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',",
            "    required=${3:False},",
            "    readonly=${4:False},",
            "    index=${5:False},",
            "    default=${6:None},",
            "    help=${7:False},",
            "    translate=${8:True}",
            ")${0}",
            ""
        ],
        "description": "Common definition for field type Text",
        "prefix": "fields.Text"
    },
    "file controller": {
        "body": [
            "",
            "# -*- coding: utf-8 -*-",
            "###############################################################################",
            "#    License, author and contributors information in:                         #",
            "#    __manifest__.py file at the root folder of this module.                   #",
            "###############################################################################",
            "",
            "from odoo.http import route, request, Controller, _",
            "",
            "${0}",
            ""
        ],
        "description": "Odoo Python web controller file",
        "prefix": "file controller"
    },
    "file model": {
        "body": [
            "",
            "# -*- coding: utf-8 -*-",
            "###############################################################################",
            "#    License, author and contributors information in:                         #",
            "#    __manifest__.py file at the root folder of this module.                   #",
            "###############################################################################",
            "",
            "from odoo import models, fields, api, _",
            "",
            "${0}",
            ""
        ],
        "description": "Odoo Python module file",
        "prefix": "file model"
    },
    "import": {
        "body": [
            "",
            "from odoo import models, fields, api",
            "from odoo.tools.translate import _${0}",
            ""
        ],
        "description": "Common Python library import lines",
        "prefix": "import"
    },
    "inverse": {
        "body": [
            "",
            "inverse=lambda self: self._inverse_${1:field}()${0}",
            ""
        ],
        "description": "Field attribute: inverse, lambda function",
        "prefix": "inverse"
    },
    "logging": {
        "body": [
            "",
            "import logging",
            "_logger = logging.getLogger(__name__)",
            "",
            "${0}",
            ""
        ],
        "description": "logging instance",
        "prefix": "logging"
    },
    "model.browse": {
        "body": [
            "",
            "${1:model}_obj = self.env['${2:model.name}']",
            "${1}_set = ${1}_obj.browse(${3:1})",
            "${0}",
            ""
        ],
        "description": "shortcut for model browse() ",
        "prefix": "model.browse"
    },
    "model.search": {
        "body": [
            "",
            "${1:model}_domain = [${2:('id', '=', 1)}]",
            "${1}_obj = self.env['${3:model.name}']",
            "${1}_set = ${1}_obj.search(${1}_domain)",
            "${0}",
            ""
        ],
        "description": "shortcut for model search() ",
        "prefix": "model.search"
    },
    "model.search_read": {
        "body": [
            "",
            "${1:model}_domain = [${2:('id', '=', 1)}]",
            "${1}_obj = self.env['${3:model.name}']",
            "${1}_set = ${1}_obj.search_read(${1}_domain, [${4:id}, ${5:name}])",
            "${0}",
            ""
        ],
        "description": "shortcut for model search_read() ",
        "prefix": "model.search_read"
    },
    "search": {
        "body": [
            "",
            "${1:model_obj}.search(${2:args}${5:, offset=${4:0}}${7:, limit=${6:None}}${10:, order=${9:None}}${12:, context=${11:None}}${14:, count=${13:False}})",
            ""
        ],
        "description": "",
        "prefix": "search"
    },
    "selection_add": {
        "body": [
            "",
            "selection_add=[('${1:draft}', ${1}) ${0}]",
            ""
        ],
        "description": "Field attribute: selection_add ",
        "prefix": "selection_add"
    },
    "super": {
        "body": [
            "",
            "super(${1:Extension}, self).${2:handler}(${3})",
            ""
        ],
        "description": "Call Python parent class",
        "prefix": "super"
    },
    "test": {
        "body": [
            "",
            "def test_${1:item_name}(self):",
            "    \"\"\" Checks if the ${1} works properly",
            "    \"\"\"",
            "",
            "    ${0:pass}",
            ""
        ],
        "description": "Test case method",
        "prefix": "test"
    },
    "track_visibility": {
        "body": [
            "",
            "track_visibility='${1:onchange}'${0}",
            ""
        ],
        "description": "Field attribute: track_visibility",
        "prefix": "track_visibility"
    }
}